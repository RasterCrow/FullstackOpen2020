{"version":3,"sources":["services/persons.js","components/PersonAdd.js","components/PersonDetails.js","components/PersonsList.js","components/PersonsFilter.js","App.js","index.js"],"names":["baseUrl","newPerson","axios","post","then","response","data","get","id","delete","personWithNewPhone","put","PersonAdd","persons","setPersons","setAlertMessage","useState","newName","setNewName","newPhone","setNewPhone","onSubmit","event","preventDefault","length","alert","PersonService","list","console","log","concat","filter","p","name","window","confirm","person","find","phone","updatedPerson","map","message","type","setTimeout","catch","error","returnedPerson","value","onChange","target","PersonDetails","PersonsList","n","key","onClick","handleButtonDelete","PersonsFilter","props","setPersonFilter","active","App","alertMessage","personFilter","useEffect","personsToLoad","element","toLowerCase","includes","Notification","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef7e9e26.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\n\n//add person to db\nconst addPerson = newPerson => {\n    const request = axios.post(baseUrl, newPerson)\n    return request.then(response => response.data)\n}\n\nconst getPersonsList = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst deletePerson = (id) => {\n     const request = axios.delete(`${baseUrl}/${id}`)\n     return request\n    //return request.then(response => response.data)\n}\nconst updatePersonNumber = (id,personWithNewPhone) => {\n    const request = axios.put(`${baseUrl}/${id}`,personWithNewPhone)\n    return request.then(response => response.data)\n   //return request.then(response => response.data)\n}\n\nexport default { \n    addPerson,\n    getPersonsList,\n    deletePerson,\n    updatePersonNumber\n  }","import React, {useState} from 'react'\nimport PersonService from '../services/persons'\n\nconst PersonAdd = ({persons, setPersons,setAlertMessage}) => {\n    const [ newName, setNewName ] = useState('')\n    const [ newPhone, setNewPhone ] = useState('')\n  \n    const addPerson = (event)=>{\n      event.preventDefault()\n      if (newName.length === 0 && newPhone.length===0) {\n        alert('You must add a name and a phone number')\n      }else if (newName.length === 0) { \n        alert('You must add a name')\n      }else if (newPhone.length === 0){\n        alert('You must add a phone number')\n      }else{\n        //retrieve latest info from server\n        let updatedPersons;\n        PersonService\n        .getPersonsList()\n        .then(list =>{\n          console.log('Loaded persons List');\n          updatedPersons = persons.concat(list)\n          //check for person already added\n          if (updatedPersons.filter(p => p.name === newName).length > 0) {\n            //if already in phonebook, asks for updating the phone number\n            if( window.confirm(`${newName} is already in the phonebook, do you want to replace its phone number?`)){\n              //get person id\n              const person = persons.find((person)=> person.name===newName)\n              const personWithNewPhone = {...person, phone:newPhone}\n\n              PersonService\n              .updatePersonNumber(personWithNewPhone.id,personWithNewPhone)\n              .then(updatedPerson => {\n                console.log('updated user')\n                console.log(updatedPerson)\n                setPersons(persons.map(p => p.id !== person.id ? p : updatedPerson))\n                setAlertMessage({message:`User ${updatedPerson.name} has been updated`,type:'alert'})\n                setTimeout(() => {\n                  setAlertMessage({message:null, type:null})\n                }, 5000)\n              })\n              .catch(error => {\n                console.log(`Errore ${error}`)\n                setAlertMessage({message:`User ${personWithNewPhone.name} has already been removed from the server.`,type:'error'})\n                setTimeout(() => {\n                  setAlertMessage({message:null, type:null})\n                }, 5000)\n              })\n            }\n            //else adds as new person\n          }else{\n            const newPerson = {\n              name: newName,\n              phone: newPhone\n            }\n            //add person to db\n            PersonService.addPerson(newPerson)\n            .then(returnedPerson =>{\n              setPersons(persons.concat(returnedPerson.person))\n              setAlertMessage({message:`User ${returnedPerson.person.name} has been added`,type:'alert'})\n              setTimeout(() => {\n                setAlertMessage({message:null, type:null})\n              }, 5000)\n              setNewName('')\n              setNewPhone('')\n            })\n            .catch(error =>{\n              //I didn't add reload component \n              console.log(`Errore ${error}`)\n              setAlertMessage({message:`User ${newPerson.name} has already been added to the server.`,type:'error'})\n              setTimeout(() => {\n                setAlertMessage({message:null, type:null})\n              }, 5000)\n            })\n          }   \n        })\n              \n      }\n    }\n    const handleNameChange = (event) => {\n\n      setNewName(event.target.value)\n    }\n    const handlePhoneChange = (event) => {\n      setNewPhone(event.target.value)\n    }\n    return(\n      <form onSubmit={addPerson}>\n          <div>name: <input value={newName} onChange={handleNameChange}  /></div>\n          <div>number: <input value={newPhone} onChange={handlePhoneChange} /></div>\n          <div>\n            <button type=\"submit\" >add</button>\n          </div>\n        </form>\n    )\n  }\n\nexport default PersonAdd","import React from 'react'\nconst PersonDetails = ({person}) => {\n    return (\n        <li>{person.name} {person.phone}</li>\n    )\n  }\n\nexport default PersonDetails","import React from 'react'\nimport PersonDetails from './PersonDetails'\nimport PersonService from '../services/persons'\n\nconst PersonsList = ({persons,setPersons,setAlertMessage}) => {\n\n  const handleButtonDelete= (n) =>{\n    if( window.confirm(`Do you really want to delete user ${n.name}?`)){\n      PersonService\n      .deletePerson(n.id)\n      .then(response => {\n        console.log('deleted user')\n        setPersons(persons.filter(p=>p.id!==n.id))\n        setAlertMessage({message:`User ${n.name} has been deleted`,type:'alert'})\n        setTimeout(() => {\n          setAlertMessage({message:null, type:null})\n        }, 5000)\n      })\n      .catch(error => {\n        console.log(`Errore ${error}`)\n        setAlertMessage({message:`User ${n.name} has already been deleted`,type:'error'})\n        setTimeout(() => {\n          setAlertMessage({message:null, type:null})\n        }, 5000)\n      })\n      \n    }\n  }\n    return (\n      persons.map(n =>{\n        console.log(n.id)\n      return (<div key={n.id}> \n      <PersonDetails person={n}/>\n      <button value={n.id} onClick={()=>handleButtonDelete(n)}>Delete</button>\n      </div>)})\n      \n    )\n  }\n  \nexport default PersonsList","import React from 'react' \n\n//PersonsFilter only updates the filter parameters based on user input.\n//The actual filter is done inside the App.js since from there it loads all the Persons\n\nconst PersonsFilter = (props) => {\n    const handleFilterChange = (event) => {\n        console.log(event.target.value)\n        props.setPersonFilter({\n          active : true, filter : event.target.value\n        })\n      }\n      return(\n        <div>filter person with: <input onChange={handleFilterChange} /></div>\n      )\n  }\n\n  export default PersonsFilter","import React, { useState, useEffect } from 'react'\nimport PersonAdd from './components/PersonAdd'\nimport PersonsList from './components/PersonsList'\nimport PersonsFilter from './components/PersonsFilter'\nimport PersonService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [alertMessage, setAlertMessage] = useState({\n    message: null, type:null\n  })\n  //In the filter component i just update the personFilter values, but the actual filtering (change data to load)\n  //its done here inside the App.js, since  I need to to use the data after filtering in other components. I couldnt update more components at once.\n  const [ personFilter, setPersonFilter ] = useState({\n    active: false, filter:''\n  })\n\n  //hook effect, loads everytime there is a rebuild\n  const hook = () =>{\n      PersonService\n        .getPersonsList()\n        .then(list =>{\n          console.log('Loaded persons List');\n          setPersons(persons.concat(list))\n        })\n  \n    }\n  useEffect(hook,[]);\n\n  //filteredPersons to load if filter is active\n  const personsToLoad = personFilter.active\n    ? persons.filter((element) => {\n        return element.name.toLowerCase().includes(personFilter.filter.toLowerCase())\n      })\n    : persons\n  \n\n  //Notification to display\n  const Notification = ({ message,type }) => {\n    if (message === null) {\n      return null\n    }\n    console.log(message)\n    if(type ==='alert'){\n      return (\n        <div className=\"alert\">\n          {message}\n        </div>\n      )\n    }else if(type==='error'){\n      return (\n        <div className=\"error\">\n          {message}\n        </div>\n      )\n    }\n  }\n \n    \n    \n  //page\n  return (\n    <div>\n      <Notification message={alertMessage.message} type={alertMessage.type}/>\n      <h2>Phonebook</h2>\n      <PersonsFilter persons={persons} setPersonFilter={setPersonFilter}/>\n      <h2>Add Person</h2>\n      <PersonAdd setAlertMessage={setAlertMessage } persons={persons} setPersons={setPersons} />\n      <h2>Persons</h2>\n      <PersonsList setAlertMessage={setAlertMessage} persons={personsToLoad} setPersons={setPersons}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}